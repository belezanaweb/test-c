using Boticario.Core.Domains.Base;
using Boticario.Core.Interfaces.Repositories.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace Boticario.Tests.Mocks.Repositories
{
    public abstract class RepositoryBaseMock<TEntity> : IRepositoryBase<TEntity>
        where TEntity : EntityBase
    {
        protected readonly List<TEntity> MemoryDataList = new List<TEntity>();

        public abstract IEnumerable<TEntity> PopulateEntities();

        public RepositoryBaseMock()
        {
            MemoryDataList.AddRange(PopulateEntities());
        }

        public Task<bool> Existe(Expression<Func<TEntity, bool>> expressao)
        {
            var result = MemoryDataList.AsQueryable().Any(expressao);

            return Task.FromResult(result);
        }

        public Task<int> Contar(Expression<Func<TEntity, bool>> expressao)
        {
            var result = MemoryDataList.AsQueryable().Count(expressao);
            return Task.FromResult(result);
        }

        public async Task Deletar(int id)
        {
            MemoryDataList.Remove(Obter(id).Result);
        }

        public Task<TEntity> Obter(int id)
        {
            return Obter(x => x.Id == id);
        }

        public Task<TEntity> Obter(Expression<Func<TEntity, bool>> expressao)
        {
            var result = MemoryDataList.AsQueryable().FirstOrDefault(expressao);

            return Task.FromResult(result);
        }

        public Task<List<TEntity>> Listar(Expression<Func<TEntity, bool>> expressao = null)
        {
            var result = MemoryDataList.AsQueryable().Where(expressao).ToList();
            return Task.FromResult(result);
        }

        public async Task<IAutoGeneratedValue> Inserir(TEntity entidade)
        {
            var nextId = MemoryDataList.Max(x => x.Id);

            nextId++;
            entidade.Id = nextId;

            MemoryDataList.Add(entidade);

            return new AutoGeneratedValue(nextId);
        }

        public async Task Atualizar(TEntity entidade)
        {
            var item = Obter(entidade.Id).Result;

            item = entidade;
        }
    }

    class AutoGeneratedValue : IAutoGeneratedValue
    {
        public AutoGeneratedValue(int valor)
        {
            Valor = valor;
        }

        public int Valor { get; private set; }
    }
}