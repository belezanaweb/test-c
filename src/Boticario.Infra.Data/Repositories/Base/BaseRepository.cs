using AutoMapper;
using Boticario.Core.Interfaces.Repositories.Base;
using Boticario.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Linq.Expressions;
using Boticario.Core.Domains.Base;
using System.Threading.Tasks;
using System.Collections.Generic;
using System;
using System.Linq;

namespace Boticario.Data.Repositories.Base
{
    public class BaseRepository<TDomain, TEntity> : IRepositoryBase<TDomain>
        where TDomain : EntityBase
        where TEntity : class
    {
        protected readonly DefaultContext DbContext;
        protected readonly DbSet<TEntity> DbSet;
        protected readonly IMapper Mapper;

        public BaseRepository(
            DefaultContext context,
            IMapper mapper)
        {
            DbContext = context;
            Mapper = mapper;
            DbSet = DbContext.Set<TEntity>();
        }

        public async Task<TDomain> Obter(int id)
        {
            var query = Mapper.ProjectTo<TDomain>(QueryableEntity);

            return await query.FirstOrDefaultAsync(x => x.Id == id);
        }

        public async Task<TDomain> Obter(Expression<Func<TDomain, bool>> expressao)
        {
            var query = Mapper.ProjectTo<TDomain>(QueryableEntity);

            return await query.FirstOrDefaultAsync(expressao);
        }

        public async Task<List<TDomain>> Listar(Expression<Func<TDomain, bool>> expressao = null)
        {
            var query = Mapper.ProjectTo<TDomain>(QueryableEntity);

            if (expressao != null)
                query = query.Where(expressao);

            return await query.ToListAsync();
        }

        public async Task<int> Contar(Expression<Func<TDomain, bool>> expression)
        {
            var query = Mapper.ProjectTo<TDomain>(QueryableEntity);

            if (expression != null)
                query = query.Where(expression);

            return await query.CountAsync();
        }

        public async Task<bool> Existe(Expression<Func<TDomain, bool>> expression)
        {
            var query = Mapper.ProjectTo<TDomain>(QueryableEntity);

            if (expression != null)
                query = query.Where(expression);

            return await query.AnyAsync();
        }

        public virtual async Task<IAutoGeneratedValue> Inserir(TDomain dominio)
        {
            var entity = await ConverteDominioParaEntidade(dominio, Activator.CreateInstance<TEntity>());
            var entry = await DbSet.AddAsync(entity);

            return new AutoGeneratedValue(() =>
            {
                var primaryKey = entry.Metadata.FindPrimaryKey().Properties.First();

                return (int)Convert.ChangeType(entry.Entity.GetType().GetProperty(primaryKey.Name).GetValue(entry.Entity), typeof(int));
            });
        }

        public virtual async Task Atualizar(TDomain dominio)
        {
            var tempEntity = await Buscar(dominio.Id);
            var entity = await ConverteDominioParaEntidade(dominio, tempEntity);

            DbContext.Entry(tempEntity).State = EntityState.Detached;
            DbSet.Update(entity);
        }

        public virtual async Task Deletar(int id)
        {
            var entity = await Buscar(id);
            DbSet.Remove(entity);
        }

        protected async Task<TEntity> Buscar(int id)
        {
            var entityType = DbContext.Model.FindEntityType(typeof(TEntity));
            var primaryKey = entityType.FindPrimaryKey().Properties.First();

            return await DbSet.FindAsync(id);
        }

        protected virtual async Task<TEntity> ConverteDominioParaEntidade(TDomain domain, TEntity entity)
        {
            entity = Mapper.Map<TEntity>(domain);
            return entity;
        }

        protected virtual IQueryable<TEntity> QueryableEntity => DbSet.AsQueryable();

    }

    class AutoGeneratedValue : IAutoGeneratedValue
    {
        private Func<int> ChavePrimaria;

        public AutoGeneratedValue(Func<int> chavePrimariaFunc)
        {
            ChavePrimaria = chavePrimariaFunc;
        }

        public int Valor => ChavePrimaria?.Invoke() ?? 0;
    }
}